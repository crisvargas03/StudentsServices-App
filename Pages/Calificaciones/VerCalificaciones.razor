@page "/Calificaciones/VerCalificaciones"
@using Sistema_Estudiantil.Models
@using Microsoft.EntityFrameworkCore

<!--Injects for Datatable-->
@inject IJSRuntime JSRuntime
@implements IDisposable

<MudCard Style="margin:35px;">
    <MudCardHeader>
        <CardHeaderContent>
            <h2 style="margin-left:120px;" class="text-center mt-5"><strong>Calificaciones Realizadas</strong></h2>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudButton StartIcon="@Icons.Material.Filled.NoteAdd" Link="/Calificaciones/CalificarEstudiantes" Variant="Variant.Text" Color="Color.Info">Agregar Calificacion</MudButton>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <table class="table table-bordered table-hover" id="table">
            <thead class="thead-dark">
                <tr>
                    <th>ID Reporte</th>
                    <th>Matricula del Estudiante</th>
                    <th>Nombre Estudiante</th>
                    <th>Materia</th>
                    <th>Cuatrimestre</th>
                    <th>Calificacion</th>
                </tr>
            </thead>
            <tbody>

                @foreach (var item in programaEstudiantilDB.ReporteCalificacion
                .Include(M => M.Materia)
                .Include(E => E.Estudiante))
                {
                    <tr>
                        <td>@item.ReporteCalificacionId</td>
                        <td>@FormartMatricula(item.EstudianteId)</td>
                        <td>@item.Estudiante.Nombre @item.Estudiante.Apellido</td>
                        <td>@item.Materia.Nombre</td>
                        <td>@item.Cuatrimestre</td>
                        <td>@FormatGrades(item.Calificacion)</td>
                    </tr>
                }

            </tbody>
        </table>
    </MudCardContent>
</MudCard>


@code{
    private static ProgramaEstudiantilDBContext programaEstudiantilDB = new ProgramaEstudiantilDBContext();
    List<ReporteCalificacion> getReports() => new ProgramaEstudiantilDBContext().ReporteCalificacion.ToList();

    string FormartMatricula(long matricula)
    {
        string matri1 = matricula.ToString().Substring(0, 4);
        string matri2 = matricula.ToString().Substring(4);
        string matriculaCompleta = matri1 + "-" + matri2;
        return matriculaCompleta;
    }

    string FormatGrades(long nota)
    {
        string calificacion = nota >= 90 && nota <= 100 ? "A" :
                              nota >= 80 && nota <= 89 ? "B" :
                              nota >= 70 && nota <= 79 ? "C" : "F";
        return calificacion;
    }

    //Methods for the funcionality of Datatable
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#table");
    }
    void IDisposable.Dispose()
    {
        JSRuntime.InvokeAsync<object>("TestDataTablesRemove", "#table");
    }
}